#!/usr/bin/env perl
use v5.14;

use Catmandu -all;
use Catmandu::Importer::getJSON;
use Hash::Merge qw(merge);
use Term::ANSIColor qw(colored);

# read configuration
my $menu    = importer('YAML', file => 'menu.yaml')->next;
my $dblist  = { map { $_->{dbkey} => $_ } 
                @{ importer('CSV', file => 'databases.csv')->to_array } };

# write errors to error.log
open (my $errlog, '>', 'error.log');

# create gsomenu.json
my $databases = expand( $menu->{databases} );

say colored('wrote gsomenu.json','white');
my $exporter = exporter('JSON', file => 'gsomenu.json', pretty => 1, canonical => 1, array => 0);
$exporter->add( { databases => $databases } );
$exporter->commit;

# expand menu (sub)tree
sub expand {
    my ($m) = @_;

    my $db;

    # database referenced by dbkey
    if (!ref $m) {
        $db = merge ( retrieve($m), $dblist->{$m} );
    } 
    # expanded list
    elsif ( ref $m eq 'ARRAY' ) {
		return [ map { expand($_) } @$m ];
	}
    # database group
    elsif ( ref $m eq 'HASH' ) {
        $db = { 
            map { $_ => $m->{$_} . "" }
            grep { defined $m->{$_} }
            qw(title_de title_en access info sorted)
        };

        # explicit list
        if (ref $m->{databases}) {
            $db->{databases} = expand( $m->{databases} );
        }
        # list given by group prefix(es)
        else { 
            my @prefixes = split /\s*\|\s*/, $m->{databases};

            say colored( join('|', @prefixes), 'blue' );
            $db = merge( $db, map { $dblist->{$_} // { } } @prefixes );

            my @databases;
            foreach my $prefix (@prefixes) {
                my $db2 = retrieve($prefix);

                if ( $db2->{subjectOf} ) {
                    my @dbs;
                    foreach my $s ( @{$db2->{subjectOf}} ) {
                        next unless $s =~ s{^http://uri.gbv.de/database/}{};
                        push @dbs, expand($s);
                    }
                    delete $db2->{subjectOf};
                    push @databases, sort { $a->{title_de} cmp $b->{title_de} } @dbs;
                } else { 
                    # single database
                    push @databases, expand($prefix);
                }

                $db = merge( $db, $db2 );
            }
            $db->{databases} = \@databases if @databases;

            if (@prefixes == 1) {
                $db->{dbkey} = $prefixes[0];
                $db->{uri}   = "http://uri.gbv.de/database/$prefixes[0]";
            } else {
                delete $db->{dbkey};
                delete $db->{uri};
            }
        }
	}

    # check
    unless ( $db->{title_en} ) {
        my $msg = $db->{dbkey} .": title_en missing";
        say STDERR colored($msg, 'yellow');
        say $errlog $msg;
    };

    return $db;
}

sub retrieve {
    my ($dbkey) = @_;

    my $url = "http://uri.gbv.de/database/$dbkey?format=jsonld";
    my $db  = importer('getJSON', from => $url)->next or do {
        say colored("Failed to get $url","red");
        exit 1;
    };

    $db->{dbkey} = $dbkey;
    $db->{title_de} = $db->{title}{de} || $db->{prefLabel}{de};
    $db->{title_en} = $db->{title}{en} || $db->{prefLabel}{en};

    $db->{access} = $db->{url} || $db->{picabase};
    if ($db->{access} =~ qr{/DB=[0-9.]+[/]?$}) {
        $db->{access} .= '{?LNG}';
    }

    delete $db->{$_} for 
        grep { !defined $db->{$_} } qw(title_de title_en);
    delete $db->{$_} for qw(prefLabel title count srubase picabase 
        @context openaccess url opacOf type inScheme);

    say colored($db->{dbkey},'green');
    exporter('YAML')->add($db);
    
	$db;
}
